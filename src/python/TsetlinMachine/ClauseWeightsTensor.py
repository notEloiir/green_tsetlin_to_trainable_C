# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TsetlinMachine

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ClauseWeightsTensor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ClauseWeightsTensor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsClauseWeightsTensor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ClauseWeightsTensor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ClauseWeightsTensor
    def Weights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # ClauseWeightsTensor
    def WeightsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # ClauseWeightsTensor
    def WeightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ClauseWeightsTensor
    def WeightsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ClauseWeightsTensor
    def Shape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ClauseWeightsTensor
    def ShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # ClauseWeightsTensor
    def ShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ClauseWeightsTensor
    def ShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ClauseWeightsTensorStart(builder):
    builder.StartObject(2)

def Start(builder):
    ClauseWeightsTensorStart(builder)

def ClauseWeightsTensorAddWeights(builder, weights):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(weights), 0)

def AddWeights(builder, weights):
    ClauseWeightsTensorAddWeights(builder, weights)

def ClauseWeightsTensorStartWeightsVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartWeightsVector(builder, numElems):
    return ClauseWeightsTensorStartWeightsVector(builder, numElems)

def ClauseWeightsTensorAddShape(builder, shape):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)

def AddShape(builder, shape):
    ClauseWeightsTensorAddShape(builder, shape)

def ClauseWeightsTensorStartShapeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShapeVector(builder, numElems):
    return ClauseWeightsTensorStartShapeVector(builder, numElems)

def ClauseWeightsTensorEnd(builder):
    return builder.EndObject()

def End(builder):
    return ClauseWeightsTensorEnd(builder)
