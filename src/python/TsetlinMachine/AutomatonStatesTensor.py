# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TsetlinMachine

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AutomatonStatesTensor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AutomatonStatesTensor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAutomatonStatesTensor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AutomatonStatesTensor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AutomatonStatesTensor
    def States(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AutomatonStatesTensor
    def StatesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # AutomatonStatesTensor
    def StatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AutomatonStatesTensor
    def StatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # AutomatonStatesTensor
    def Shape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AutomatonStatesTensor
    def ShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # AutomatonStatesTensor
    def ShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AutomatonStatesTensor
    def ShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def AutomatonStatesTensorStart(builder):
    builder.StartObject(2)

def Start(builder):
    AutomatonStatesTensorStart(builder)

def AutomatonStatesTensorAddStates(builder, states):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(states), 0)

def AddStates(builder, states):
    AutomatonStatesTensorAddStates(builder, states)

def AutomatonStatesTensorStartStatesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartStatesVector(builder, numElems):
    return AutomatonStatesTensorStartStatesVector(builder, numElems)

def AutomatonStatesTensorAddShape(builder, shape):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)

def AddShape(builder, shape):
    AutomatonStatesTensorAddShape(builder, shape)

def AutomatonStatesTensorStartShapeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShapeVector(builder, numElems):
    return AutomatonStatesTensorStartShapeVector(builder, numElems)

def AutomatonStatesTensorEnd(builder):
    return builder.EndObject()

def End(builder):
    return AutomatonStatesTensorEnd(builder)
