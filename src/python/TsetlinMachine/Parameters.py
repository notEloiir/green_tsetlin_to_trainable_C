# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TsetlinMachine

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Parameters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Parameters()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParameters(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Parameters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Parameters
    def Threshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Parameters
    def NLiterals(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Parameters
    def NClauses(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Parameters
    def NClasses(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Parameters
    def MaxState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Parameters
    def MinState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Parameters
    def BoostTp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Parameters
    def LearnS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ParametersStart(builder):
    builder.StartObject(8)

def Start(builder):
    ParametersStart(builder)

def ParametersAddThreshold(builder, threshold):
    builder.PrependUint32Slot(0, threshold, 0)

def AddThreshold(builder, threshold):
    ParametersAddThreshold(builder, threshold)

def ParametersAddNLiterals(builder, nLiterals):
    builder.PrependUint32Slot(1, nLiterals, 0)

def AddNLiterals(builder, nLiterals):
    ParametersAddNLiterals(builder, nLiterals)

def ParametersAddNClauses(builder, nClauses):
    builder.PrependUint32Slot(2, nClauses, 0)

def AddNClauses(builder, nClauses):
    ParametersAddNClauses(builder, nClauses)

def ParametersAddNClasses(builder, nClasses):
    builder.PrependUint32Slot(3, nClasses, 0)

def AddNClasses(builder, nClasses):
    ParametersAddNClasses(builder, nClasses)

def ParametersAddMaxState(builder, maxState):
    builder.PrependInt8Slot(4, maxState, 0)

def AddMaxState(builder, maxState):
    ParametersAddMaxState(builder, maxState)

def ParametersAddMinState(builder, minState):
    builder.PrependInt8Slot(5, minState, 0)

def AddMinState(builder, minState):
    ParametersAddMinState(builder, minState)

def ParametersAddBoostTp(builder, boostTp):
    builder.PrependUint8Slot(6, boostTp, 0)

def AddBoostTp(builder, boostTp):
    ParametersAddBoostTp(builder, boostTp)

def ParametersAddLearnS(builder, learnS):
    builder.PrependFloat32Slot(7, learnS, 0.0)

def AddLearnS(builder, learnS):
    ParametersAddLearnS(builder, learnS)

def ParametersEnd(builder):
    return builder.EndObject()

def End(builder):
    return ParametersEnd(builder)
