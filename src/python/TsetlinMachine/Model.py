# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TsetlinMachine

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Model(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Model()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Model
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Model
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from TsetlinMachine.Parameters import Parameters
            obj = Parameters()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Model
    def AutomatonStates(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from TsetlinMachine.AutomatonStatesTensor import AutomatonStatesTensor
            obj = AutomatonStatesTensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Model
    def ClauseWeights(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from TsetlinMachine.ClauseWeightsTensor import ClauseWeightsTensor
            obj = ClauseWeightsTensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Model
    def LiteralNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Model
    def LiteralNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Model
    def LiteralNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def ModelStart(builder):
    builder.StartObject(4)

def Start(builder):
    ModelStart(builder)

def ModelAddParams(builder, params):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)

def AddParams(builder, params):
    ModelAddParams(builder, params)

def ModelAddAutomatonStates(builder, automatonStates):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(automatonStates), 0)

def AddAutomatonStates(builder, automatonStates):
    ModelAddAutomatonStates(builder, automatonStates)

def ModelAddClauseWeights(builder, clauseWeights):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(clauseWeights), 0)

def AddClauseWeights(builder, clauseWeights):
    ModelAddClauseWeights(builder, clauseWeights)

def ModelAddLiteralNames(builder, literalNames):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(literalNames), 0)

def AddLiteralNames(builder, literalNames):
    ModelAddLiteralNames(builder, literalNames)

def ModelStartLiteralNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLiteralNamesVector(builder, numElems):
    return ModelStartLiteralNamesVector(builder, numElems)

def ModelEnd(builder):
    return builder.EndObject()

def End(builder):
    return ModelEnd(builder)
